// <auto-generated />
using System;
using Einstein.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Einstein.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220102162346_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlunoCurso", b =>
                {
                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uuid");

                    b.Property<short>("CursoId")
                        .HasColumnType("smallint");

                    b.HasKey("AlunoId", "CursoId");

                    b.HasIndex("CursoId");

                    b.ToTable("AlunoCurso");
                });

            modelBuilder.Entity("CursoModalidade", b =>
                {
                    b.Property<short>("CursoId")
                        .HasColumnType("smallint");

                    b.Property<short>("ModalidadeId")
                        .HasColumnType("smallint");

                    b.HasKey("CursoId", "ModalidadeId");

                    b.HasIndex("ModalidadeId");

                    b.ToTable("CursoModalidade");
                });

            modelBuilder.Entity("CursoProfessor", b =>
                {
                    b.Property<short>("CursoId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.HasKey("CursoId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("CursoProfessor");
                });

            modelBuilder.Entity("CursoTurno", b =>
                {
                    b.Property<short>("CursoId")
                        .HasColumnType("smallint");

                    b.Property<short>("TurnoId")
                        .HasColumnType("smallint");

                    b.HasKey("CursoId", "TurnoId");

                    b.HasIndex("TurnoId");

                    b.ToTable("CursoTurno");
                });

            modelBuilder.Entity("DisciplinaProfessor", b =>
                {
                    b.Property<short>("DisciplinaId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.HasKey("DisciplinaId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("DisciplinaProfessor");
                });

            modelBuilder.Entity("Einstein.Core.Models.Aluno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AnoConclusaoEnsinoMedio")
                        .HasColumnType("integer");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Bairro")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CEP")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Cidade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("EstaEmpregado")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExAluno")
                        .HasColumnType("boolean");

                    b.Property<string>("Facebook")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("JaRealizouEnem")
                        .HasColumnType("boolean");

                    b.Property<string>("Latitude")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Logradouro")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<float?>("MediaGeralEnem")
                        .HasColumnType("real");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float?>("NotaCienciasDaNaturezaEnem")
                        .HasColumnType("real");

                    b.Property<float?>("NotaExatasEnem")
                        .HasColumnType("real");

                    b.Property<float?>("NotaHumanasEnem")
                        .HasColumnType("real");

                    b.Property<float?>("NotaLinguagensEnem")
                        .HasColumnType("real");

                    b.Property<float?>("NotaRedacaoEnem")
                        .HasColumnType("real");

                    b.Property<int?>("Numero")
                        .HasColumnType("integer");

                    b.Property<string>("RG")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UF")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("Einstein.Core.Models.Curso", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Curso");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(1613),
                            IP = "localhost",
                            Nome = "Extensivo",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)2,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(1616),
                            IP = "localhost",
                            Nome = "Intensivo",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)3,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(1617),
                            IP = "localhost",
                            Nome = "Super Intensivo",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Einstein.Core.Models.Disciplina", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Disciplina");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(2448),
                            IP = "localhost",
                            Nome = "Português",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)2,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(2449),
                            IP = "localhost",
                            Nome = "Matemática",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)3,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(2450),
                            IP = "localhost",
                            Nome = "Geografia",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)4,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(2451),
                            IP = "localhost",
                            Nome = "História",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)5,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(2451),
                            IP = "localhost",
                            Nome = "Física",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)6,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(2452),
                            IP = "localhost",
                            Nome = "Química",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Einstein.Core.Models.FormaPagamento", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("FormaPagamento");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 228, DateTimeKind.Local).AddTicks(7969),
                            Descricao = "Dinheiro",
                            IP = "localhost",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)2,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 228, DateTimeKind.Local).AddTicks(7977),
                            Descricao = "Boleto",
                            IP = "localhost",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)3,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 228, DateTimeKind.Local).AddTicks(7978),
                            Descricao = "Cartão de Crédito",
                            IP = "localhost",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)4,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 228, DateTimeKind.Local).AddTicks(7979),
                            Descricao = "Cartão de Débito",
                            IP = "localhost",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)5,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 228, DateTimeKind.Local).AddTicks(7979),
                            Descricao = "Pix",
                            IP = "localhost",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Einstein.Core.Models.HorarioConfiguracao", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DiaDaSemana")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("HoraFim")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("HoraInicio")
                        .HasColumnType("time without time zone");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<short>("TurnoId")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TurnoId");

                    b.ToTable("HorarioConfiguracao");
                });

            modelBuilder.Entity("Einstein.Core.Models.Modalidade", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Modalidade");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(2168),
                            IP = "localhost",
                            Nome = "Presencial",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)2,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(2170),
                            IP = "localhost",
                            Nome = "Online",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Einstein.Core.Models.MotivoAusencia", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("MotivoAusencia");
                });

            modelBuilder.Entity("Einstein.Core.Models.MovimentoFinanceiro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp");

                    b.Property<short>("FormaPagamentoId")
                        .HasColumnType("smallint");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<short>("Parcelas")
                        .HasColumnType("smallint");

                    b.Property<int>("TipoMovimentoFinanceiro")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ValorDesconto")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValorEntrada")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValorPago")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FormaPagamentoId");

                    b.ToTable("MovimentoFinanceiro");
                });

            modelBuilder.Entity("Einstein.Core.Models.Professor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Bairro")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CEP")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<float>("CargaHorariaSemanal")
                        .HasColumnType("real");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Cidade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Graduacao")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LocalOndeTrabalha")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Logradouro")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Numero")
                        .HasColumnType("integer");

                    b.Property<string>("RG")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("TrabalhaEmOutroLocal")
                        .HasColumnType("boolean");

                    b.Property<string>("UF")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ValorHoraAula")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("Einstein.Core.Models.ProfessorConfiguracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<short>("CursoId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<short>("DisciplinaId")
                        .HasColumnType("smallint");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<short>("ModalidadeId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("ModalidadeId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("ProfessorConfiguracao");
                });

            modelBuilder.Entity("Einstein.Core.Models.ProfessorConfiguracaoHorario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<short>("HorarioConfiguracaoId")
                        .HasColumnType("smallint");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ProfessorConfiguracaoId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HorarioConfiguracaoId");

                    b.HasIndex("ProfessorConfiguracaoId");

                    b.ToTable("ProfessorConfiguracaoHorario");
                });

            modelBuilder.Entity("Einstein.Core.Models.ProfessorFrequencia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<short?>("MotivoAusenciaId")
                        .HasColumnType("smallint");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("Presente")
                        .HasColumnType("boolean");

                    b.Property<int>("ProfessorConfiguracaoHorarioId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ProfessorFrequencia");
                });

            modelBuilder.Entity("Einstein.Core.Models.Turno", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UsuarioAlteracaoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacaoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Turno");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(1867),
                            IP = "localhost",
                            Nome = "Matutino",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)2,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(1870),
                            IP = "localhost",
                            Nome = "Vespertino",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = (short)3,
                            Ativo = true,
                            DataCriacao = new DateTime(2022, 1, 2, 13, 23, 46, 229, DateTimeKind.Local).AddTicks(1870),
                            IP = "localhost",
                            Nome = "Noturno",
                            UsuarioCriacaoId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d591d926-0e57-45aa-a2f7-33348a346116"),
                            ConcurrencyStamp = "7883ab1e-6f44-4c76-8c22-73fa2108e900",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c8ddb606-0256-46f6-bbaf-4a6215a72ad9"),
                            ConcurrencyStamp = "10c66ab3-65b2-4a30-9ae4-5945ee6ed1f8",
                            Name = "Professor",
                            NormalizedName = "PROFESSOR"
                        },
                        new
                        {
                            Id = new Guid("9add3f7d-ad05-4adb-8743-cbf895555517"),
                            ConcurrencyStamp = "a26339e2-371e-43b7-bb27-960ab42a8f0e",
                            Name = "Aluno",
                            NormalizedName = "ALUNO"
                        },
                        new
                        {
                            Id = new Guid("377bd054-2c01-4489-8e0d-86d2fedc2bed"),
                            ConcurrencyStamp = "5801b13b-b181-4ca0-90ba-08ed5d563531",
                            Name = "Secretaria",
                            NormalizedName = "SECRETARIA"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AlunoCurso", b =>
                {
                    b.HasOne("Einstein.Core.Models.Aluno", null)
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Einstein.Core.Models.Curso", null)
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CursoModalidade", b =>
                {
                    b.HasOne("Einstein.Core.Models.Curso", null)
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Einstein.Core.Models.Modalidade", null)
                        .WithMany()
                        .HasForeignKey("ModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CursoProfessor", b =>
                {
                    b.HasOne("Einstein.Core.Models.Curso", null)
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Einstein.Core.Models.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CursoTurno", b =>
                {
                    b.HasOne("Einstein.Core.Models.Curso", null)
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Einstein.Core.Models.Turno", null)
                        .WithMany()
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DisciplinaProfessor", b =>
                {
                    b.HasOne("Einstein.Core.Models.Disciplina", null)
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Einstein.Core.Models.Professor", null)
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Einstein.Core.Models.HorarioConfiguracao", b =>
                {
                    b.HasOne("Einstein.Core.Models.Turno", "Turno")
                        .WithMany("HorarioConfiguracao")
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("Einstein.Core.Models.MovimentoFinanceiro", b =>
                {
                    b.HasOne("Einstein.Core.Models.FormaPagamento", "FormaPagamento")
                        .WithMany("MovimentoFinanceiro")
                        .HasForeignKey("FormaPagamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormaPagamento");
                });

            modelBuilder.Entity("Einstein.Core.Models.ProfessorConfiguracao", b =>
                {
                    b.HasOne("Einstein.Core.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Einstein.Core.Models.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Einstein.Core.Models.Modalidade", "Modalidade")
                        .WithMany()
                        .HasForeignKey("ModalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Einstein.Core.Models.Professor", "Professor")
                        .WithMany("ProfessorConfiguracao")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Disciplina");

                    b.Navigation("Modalidade");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Einstein.Core.Models.ProfessorConfiguracaoHorario", b =>
                {
                    b.HasOne("Einstein.Core.Models.HorarioConfiguracao", "HorarioConfiguracao")
                        .WithMany("ProfessorConfiguracaoHorario")
                        .HasForeignKey("HorarioConfiguracaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Einstein.Core.Models.ProfessorConfiguracao", "ProfessorConfiguracao")
                        .WithMany("ProfessorConfiguracaoHorario")
                        .HasForeignKey("ProfessorConfiguracaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HorarioConfiguracao");

                    b.Navigation("ProfessorConfiguracao");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Einstein.Core.Models.FormaPagamento", b =>
                {
                    b.Navigation("MovimentoFinanceiro");
                });

            modelBuilder.Entity("Einstein.Core.Models.HorarioConfiguracao", b =>
                {
                    b.Navigation("ProfessorConfiguracaoHorario");
                });

            modelBuilder.Entity("Einstein.Core.Models.Professor", b =>
                {
                    b.Navigation("ProfessorConfiguracao");
                });

            modelBuilder.Entity("Einstein.Core.Models.ProfessorConfiguracao", b =>
                {
                    b.Navigation("ProfessorConfiguracaoHorario");
                });

            modelBuilder.Entity("Einstein.Core.Models.Turno", b =>
                {
                    b.Navigation("HorarioConfiguracao");
                });
#pragma warning restore 612, 618
        }
    }
}
